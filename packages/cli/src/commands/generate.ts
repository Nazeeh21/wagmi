import { camelCase } from 'change-case'
import type { FSWatcher, WatchOptions } from 'chokidar'
import { default as dedent } from 'dedent'
import { default as fse } from 'fs-extra'

import type { ContractConfig, Watch } from '../config'
import { Config } from '../config'
import * as logger from '../logger'
import type { Contract } from '../types'
import { findConfig, resolveConfig } from '../utils'

export type Generate = {
  config?: string
  root?: string
}

export async function generate({ config, root }: Generate) {
  const configPath = await findConfig({ config, root })
  if (!configPath) throw new Error('No config found')

  const resolvedConfig = await resolveConfig({ configPath })
  const parsedConfig = await Config.parseAsync(resolvedConfig)

  const contractNames = new Set<string>()
  const contracts: { [name: string]: Contract } = {}
  const watchConfigs: Watch[] = []
  for (const contractConfig of parsedConfig.contracts) {
    if ('contracts' in contractConfig) {
      const resolvedContracts = await contractConfig.contracts()
      parsedConfig.contracts.push(...resolvedContracts)
      if (contractConfig.watch) watchConfigs.push(contractConfig.watch)
      continue
    }

    const { address, source, name } = contractConfig
    logger.log(`Fetching ABI for ${name}`)
    if (contractNames.has(name)) throw new Error('Contract name must be unique')

    const contract = await getContract({ address, name, source })
    contracts[name] = contract
    contractNames.add(name)
  }

  // Write output to file
  await writeContracts(Object.values(contracts))
  if (!watchConfigs.length) {
    logger.log('Done!')
    return
  }

  const { watch } = await import('chokidar')

  // Watch for changes
  let timeout: NodeJS.Timeout | null
  const delay = 100
  const watchers: FSWatcher[] = []
  const watchOptions: WatchOptions = {
    atomic: true,
    awaitWriteFinish: true,
    ignoreInitial: true,
    persistent: true,
  }
  for (const watchConfig of watchConfigs) {
    const watcher = watch(watchConfig.paths, watchOptions)
    watcher.on('all', async (event, path) => {
      if (event !== 'change' && event !== 'add' && event !== 'unlink') return

      let needsWrite = false
      if (event === 'change') {
        const contractConfig = await watchConfig.onChange(path)
        if (!contractConfig) return
        contracts[contractConfig.name] = await getContract(contractConfig)
        needsWrite = true
      } else if (event === 'add') {
        const contractConfig = await watchConfig.onAdd?.(path)
        if (!contractConfig) return
        contracts[contractConfig.name] = await getContract(contractConfig)
        contractNames.add(contractConfig.name)
        needsWrite = true
      } else if (event === 'unlink') {
        const name = await watchConfig.onRemove?.(path)
        if (!name) return
        delete contracts[name]
        contractNames.delete(name)
        needsWrite = true
      }

      if (needsWrite) {
        console.log(event, path)
        if (timeout) clearTimeout(timeout)
        timeout = setTimeout(async () => {
          console.log('Saving…')
          timeout = null
          await writeContracts(Object.values(contracts))
          console.log('Saving!')
        }, delay)
        needsWrite = false
      }
    })
    watcher.on('ready', async () => {
      if (watchConfig.command) {
        console.log(`Running watch command: ${watchConfig.command}`)
        const [command, ...parts] = watchConfig.command.split(' ')
        const { execa } = await import('execa')
        await execa(command!, parts).stdout?.pipe(process.stdout)
      }
    })

    watchers.push(watcher)
  }

  // Watch config file for changes
  watch(configPath).on('change', async (path) => {
    const { basename } = await import('pathe')
    logger.log(
      `> Found a change in ${basename(
        path,
      )}. Restart generate to see the changes in effect.`,
    )
  })

  // Display message and close watchers on Ctrl+C exit
  process.once('SIGINT', shutdown)
  process.once('SIGTERM', shutdown)
  function shutdown() {
    logger.log('Shutting down watch…')
    for (const watcher of watchers) {
      watcher.close()
    }
  }
}

async function writeContracts(
  contracts: Contract[],
  filename = 'wagmi-generated',
) {
  // Assemble content
  let content = dedent`
    // Generated by @wagmi/cli
    // ${new Date().toISOString()}
  `
  for (const contract of contracts) {
    content = dedent`
      ${content}

      ${contract.content}
    `
  }

  // Format and write output
  const cwd = process.cwd()
  const outPath = `${cwd}/src/${filename}.ts`
  const dprint = (await import('dprint-node')).default
  const formatted = await dprint.format(outPath, content, {
    bracePosition: 'nextLine',
    quoteProps: 'asNeeded',
    quoteStyle: 'alwaysSingle',
    semiColons: 'asi',
    trailingCommas: 'onlyMultiLine',
  })
  await fse.writeFile(outPath, formatted, {})
}

async function getContract({ address, name, source }: ContractConfig) {
  let abi
  if (typeof source === 'function') {
    try {
      abi = await source({ address })
    } catch (error) {
      throw new Error(`Failed to fetch contract ABI for ${name}`)
    }
  } else abi = source

  const abiName = getAbiName(name)
  const addressName = getAddressName(name)
  let content = dedent`
    export const ${abiName} = ${JSON.stringify(abi)} as const
  `
  if (address) {
    const configName = getContractConfigName(name)
    content = dedent`
      ${content}
      export const ${addressName} = ${JSON.stringify(address)} as const
      export const ${configName} = { address: ${addressName}, abi: ${abiName} } as const
    `
  }

  return { abi, address, content, name }
}

function getAbiName(contractName: string) {
  return `${camelCase(contractName)}ABI`
}
function getAddressName(contractName: string) {
  return `${camelCase(contractName)}Address`
}
function getContractConfigName(contractName: string) {
  return `${camelCase(contractName)}Config`
}
